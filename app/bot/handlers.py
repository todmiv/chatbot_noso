# –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞
from aiogram import Router, F
from aiogram.types import Message, Document
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.bot.keyboards import MAIN_MENU
from app.services.ai_service import ask_ai
from app.services.document_service import doc_service
from app.database.connection import get_user, upsert_user
from app.config import settings
import httpx
import os

router = Router()

class Registration(StatesGroup):
    inn = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    user = await get_user(message.from_user.id)
    if user is None or user['inn'] is None:
        await message.answer("–í–∞—à –ò–ù–ù –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞–∂–º–∏—Ç–µ ¬´–í–≤–µ—Å—Ç–∏ –ò–ù–ù¬ª.", reply_markup=MAIN_MENU)
    else:
        status = "–ß–ª–µ–Ω –°–†–û" if user['is_member'] else "–ì–æ—Å—Ç—å"
        await message.answer(f"–ò–ù–ù: {user['inn']}\n–°—Ç–∞—Ç—É—Å: {status}", reply_markup=MAIN_MENU)

# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ò–ù–ù (12 —Ü–∏—Ñ—Ä)
@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –ò–ù–ù")
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(Registration.inn)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù (12 —Ü–∏—Ñ—Ä):", reply_markup=MAIN_MENU)

@router.message(Registration.inn)
async def process_inn(message: Message, state: FSMContext):
    inn = message.text.strip()
    if not ((len(inn) == 10 or len(inn) == 12) and inn.isdigit()):
        await message.answer("–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 (–¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π) –∏–ª–∏ 12 (–¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü) —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(f"{settings.sro_api_url}/check_inn/{inn}")
            response.raise_for_status()
            data = response.json()
            is_member = data.get('is_member', False)
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        await state.clear()
        return
    
    role = 'member' if is_member else 'guest'
    await upsert_user(message.from_user.id, inn, is_member, role)
    
    if is_member:
        await message.answer("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã —á–ª–µ–Ω –°–†–û.")
    else:
        await message.answer("–ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –°–†–û.")
    
    await state.clear()

@router.message(F.text == "‚ùì –í–æ–ø—Ä–æ—Å –ò–ò")
async def question_handler(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ PDF.", reply_markup=MAIN_MENU)

@router.message(F.document)
async def handle_pdf(message: Message, document: Document):
    if document.mime_type == "application/pdf":
        os.makedirs("documents/uploaded", exist_ok=True)
        file_path = f"documents/uploaded/{document.file_name}"
        await document.download(destination_file=file_path)
        await message.answer(f"–î–æ–∫—É–º–µ–Ω—Ç {document.file_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ'", reply_markup=MAIN_MENU)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.", reply_markup=MAIN_MENU)

@router.message(F.text)
async def ai_answer(message: Message):
    docs = await doc_service.search(message.text)
    context = "\n".join(f"–î–æ–∫—É–º–µ–Ω—Ç: {d['name']}\n{d['text']}" for d in docs[:3])
    answer = await ask_ai(message.text, context)
    
    if docs:
        sources = "\n".join(
            f"üîπ {d['name']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {d['score']:.1%})"
            for d in docs[:3]
        )
        answer = f"{answer}\n\nüìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n{sources}"
    
    await message.answer(answer, reply_markup=MAIN_MENU)


