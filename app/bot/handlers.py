# app/bot/handlers.py
"""
–û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram-–±–æ—Ç–∞
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, Document
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.bot.keyboards import MAIN_MENU
from app.services.ai_service import ask_ai
from app.services.document_service import doc_service
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
from app.services.sro_registry_service import sro_registry_service # <-- –ù–æ–≤—ã–π –∏–º–ø–æ—Ä—Ç
from app.database.connection import get_user, upsert_user, check_question_limit
import os

logger = logging.getLogger(__name__)

router = Router()

class Registration(StatesGroup):
    inn = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_handler(message: Message):
    logger.info(f"Profile handler called for user {message.from_user.id}")
    try:
        user = await get_user(message.from_user.id)
        logger.debug(f"User data retrieved: {user}")
    except Exception as e:
        logger.error(f"Error retrieving user {message.from_user.id} in profile_handler: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU)
        return

    if user is None:
        logger.debug("User record not found in database")
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ ¬´–í–≤–µ—Å—Ç–∏ –ò–ù–ù¬ª –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=MAIN_MENU)
    elif user['inn'] is None:
        logger.debug("User INN is NULL in database")
        await message.answer("–í–∞—à –ò–ù–ù –ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω. –ù–∞–∂–º–∏—Ç–µ ¬´–í–≤–µ—Å—Ç–∏ –ò–ù–ù¬ª.", reply_markup=MAIN_MENU)
    else:
        logger.debug(f"User role: {user['role']}")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º user['role'] –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞, –∫–∞–∫ –≤ –¢–ó –∏ –º–æ–¥–µ–ª–∏
        if user['role'] == 'member':
            status = "–ß–ª–µ–Ω –°–†–û"
        elif user['role'] == 'guest':
            status = "–ì–æ—Å—Ç—å"
        else:
            status = f"–†–æ–ª—å: {user['role']}"

        await message.answer(f"–ò–ù–ù: {user['inn']}\n–°—Ç–∞—Ç—É—Å: {status}", reply_markup=MAIN_MENU)


# –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)
@router.message(F.text == "–í–≤–µ—Å—Ç–∏ –ò–ù–ù")
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(Registration.inn)
    # –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –¥–ª–∏–Ω –ò–ù–ù
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù (10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä):", reply_markup=MAIN_MENU)


@router.message(Registration.inn)
async def process_inn(message: Message, state: FSMContext):
    inn = message.text.strip()
    # –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª–∏–Ω—ã –ò–ù–ù –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ 10 –∏ 12 —Ü–∏—Ñ—Ä (–∫–∞–∫ –≤ –¢–ó)
    if not ((len(inn) == 10 or len(inn) == 12) and inn.isdigit()):
        # –û–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 (–¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π) –∏–ª–∏ 12 (–¥–ª—è —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü) —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=MAIN_MENU)
        await state.clear()
        return

    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ò–ù–ù —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        logger.info(f"Checking INN {inn} for user {message.from_user.id} via SRO Registry Service")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        membership_data = await sro_registry_service.check_membership_by_inn(inn)
        
        if membership_data is None:
            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            logger.info(f"INN {inn} not found or check failed for user {message.from_user.id}")
            await message.answer("–ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–µ—Å—Ç—Ä–µ –°–†–û –ù–û–°–û –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –°–†–û.", reply_markup=MAIN_MENU)
            await state.clear()
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —á–ª–µ–Ω—Å—Ç–≤–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        is_member = membership_data.get('is_member', False)
        logger.info(f"INN {inn} check result for user {message.from_user.id}: is_member={is_member}")
        
    except Exception as e:
        logger.error(f"Error checking INN {inn} for user {message.from_user.id} via SRO Registry Service: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ò–ù–ù. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU)
        await state.clear()
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    role = 'member' if is_member else 'guest'

    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        await upsert_user(message.from_user.id, inn, is_member, role)
        logger.info(f"User {message.from_user.id} data upserted successfully with INN {inn}, role {role}.")
    except Exception as db_error:
        logger.error(f"Error upserting user {message.from_user.id} with INN {inn}: {db_error}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU)
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if is_member:
        await message.answer("–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã —á–ª–µ–Ω –°–†–û.", reply_markup=MAIN_MENU)
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–æ, —á—Ç–æ–±—ã –æ—Ç—Ä–∞–∑–∏—Ç—å, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±—ã–ª–∞ —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä
        await message.answer("–ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ —á–ª–µ–Ω–æ–≤ –°–†–û –ù–û–°–û. –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç–∞—Ç—É—Å '–ì–æ—Å—Ç—å'.", reply_markup=MAIN_MENU)

    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã/–∫–Ω–æ–ø–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ –ò–ò
@router.message(F.text == "‚ùì –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å")
async def question_handler(message: Message):
    # –í MVP —ç—Ç–∞–ø–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–∏–º –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å PDF
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ PDF.", reply_markup=MAIN_MENU)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è PDF-–¥–æ–∫—É–º–µ–Ω—Ç–∞
@router.message(F.document)
async def handle_pdf(message: Message, document: Document):
    if document.mime_type == "application/pdf":
        os.makedirs("documents/uploaded", exist_ok=True)
        file_path = f"documents/uploaded/{document.file_name}"
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
        await message.bot.download(document, destination=file_path)
        await message.answer(f"–î–æ–∫—É–º–µ–Ω—Ç {document.file_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ '–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ'", reply_markup=MAIN_MENU)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª.", reply_markup=MAIN_MENU)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π –≤–æ–ø—Ä–æ—Å–∞ –ò–ò)
@router.message(F.text)
async def ai_answer(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞
    user = await get_user(message.from_user.id)
    if not user:
        user_role = 'guest'
        user_id = message.from_user.id
        logger.info(f"Guest user {user_id} asking a question.")
    else:
        user_role = user['role']
        user_id = user['id']
        logger.info(f"User {user_id} (role: {user_role}) asking a question.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≥–æ—Å—Ç–µ–π
    is_allowed = await check_question_limit(user_id, user_role)
    if not is_allowed:
        await message.answer("–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (3 –≤–æ–ø—Ä–æ—Å–∞).", reply_markup=MAIN_MENU)
        return

    # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    docs = await doc_service.search(message.text)
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    context = "\n".join(f"–î–æ–∫—É–º–µ–Ω—Ç: {d['name']}\n{d['text']}" for d in docs[:3])

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    answer = await ask_ai(message.text, context)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    if docs:
        sources = "\n".join(
            f"üîπ {d['name']} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {d['score']:.1%})"
            for d in docs[:3]
        )
        answer = f"{answer}\n\nüìö –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n{sources}"

    await message.answer(answer, reply_markup=MAIN_MENU)
